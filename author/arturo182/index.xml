<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>arturo182 on Blog</title><link>https://blog.xil.se/author/arturo182/</link><description>Recent content in arturo182 on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Feb 2016 14:40:00 +0100</lastBuildDate><atom:link href="https://blog.xil.se/author/arturo182/index.xml" rel="self" type="application/rss+xml"/><item><title>Internetwache CTF 2016 Sh-ock (Exp 90) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp-90-arturo182/</link><pubDate>Sun, 21 Feb 2016 14:40:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp-90-arturo182/</guid><description>Problem This is some kind of weird thing. I am sh-ocked.
Service: 188.166.133.53:12589
Solved by 105 teams
Solution We nc to the service and are presented with a prompt:
Welcome and have fun! $ Let&amp;rsquo;s try something basic:
Welcome and have fun! $help [ReferenceError: lh is not defined] $ Right off the bat, that tells us a few things, the ReferenceError tells us that this is JavaScript (nodejs). The lh part is a little more confusing, let&amp;rsquo;s try something else:</description></item><item><title>Internetwache CTF 2016 Crypto-Pirat (Crypto 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 14:20:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto-50-arturo182/</guid><description>Problem Did the East German Secret Police see a Pirat on the sky? Help me find out!
Attachment: https://ctf.internetwache.org/files/crypto50.zip
Solution Sidenote: This one took us some time, we started ok but then our progress grinded to a halt because we just didn&amp;rsquo;t know what to do with the output we got. The organizers of the CTF agreed that the challenge was not clear enough and after 12 hours added two hints:</description></item><item><title>Internetwache CTF 2016 SPIM (Rev 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:42:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev-50-arturo182/</guid><description>Problem My friend keeps telling me, that real hackers speak assembly fluently. Are you a real hacker? Decode this string: &amp;ldquo;IVyN5U3X)ZUMYCs&amp;rdquo;
Attachment: https://ctf.internetwache.org/files/rev50.zip
Solved by 235 teams
Solution We unpack the file and get some MIPS assembly:
User Text Segment [00400000]..[00440000] [00400000] 8fa40000 lw $4, 0($29) ; 183: lw $a0 0($sp) # argc [00400004] 27a50004 addiu $5, $29, 4 ; 184: addiu $a1 $sp 4 # argv [00400008] 24a60004 addiu $6, $5, 4 ; 185: addiu $a2 $a1 4 # envp [0040000c] 00041080 sll $2, $4, 2 ; 186: sll $v0 $a0 2 [00400010] 00c23021 addu $6, $6, $2 ; 187: addu $a2 $a2 $v0 [00400014] 0c100009 jal 0x00400024 [main] ; 188: jal main [00400018] 00000000 nop ; 189: nop [0040001c] 3402000a ori $2, $0, 10 ; 191: li $v0 10 [00400020] 0000000c syscall ; 192: syscall # syscall 10 (exit) [00400024] 3c081001 lui $8, 4097 [flag] ; 7: la $t0, flag [00400028] 00004821 addu $9, $0, $0 ; 8: move $t1, $0 [0040002c] 3401000f ori $1, $0, 15 ; 11: sgt $t2, $t1, 15 [00400030] 0029502a slt $10, $1, $9 [00400034] 34010001 ori $1, $0, 1 ; 12: beq $t2, 1, exit [00400038] 102a0007 beq $1, $10, 28 [exit-0x00400038] [0040003c] 01095020 add $10, $8, $9 ; 14: add $t2, $t0, $t1 [00400040] 81440000 lb $4, 0($10) ; 15: lb $a0, ($t2) [00400044] 00892026 xor $4, $4, $9 ; 16: xor $a0, $a0, $t1 [00400048] a1440000 sb $4, 0($10) ; 17: sb $a0, 0($t2) [0040004c] 21290001 addi $9, $9, 1 ; 19: add $t1, $t1, 1 [00400050] 0810000b j 0x0040002c [for] ; 20: j for [00400054] 00082021 addu $4, $0, $8 ; 24: move $a0, $t0 [00400058] 0c100019 jal 0x00400064 [printstring]; 25: jal printstring [0040005c] 3402000a ori $2, $0, 10 ; 26: li $v0, 10 [00400060] 0000000c syscall ; 27: syscall [00400064] 34020004 ori $2, $0, 4 ; 30: li $v0, 4 [00400068] 0000000c syscall ; 31: syscall [0040006c] 03e00008 jr $31 ; 32: jr $ra I never did any MIPS work before, but armed with MIPS Instruction Reference, I started working on it.</description></item><item><title>Internetwache CTF 2016 Rock With The Wired Shark (Misc 70) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-70-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:33:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-70-arturo182/</guid><description>Problem Someone sent me a file with white and black rectangles. I don&amp;rsquo;t know how to read it. Can you help me?
Attachment: https://ctf.internetwache.org/files/misc70.zip
Solved by 454 teams
Solution What we get is a packet capture file. I usually approach those with python, but this one was easier to do with just Wireshark.
But first, let&amp;rsquo;s run strings on it for good measure, two things are interesting:
Authorization: Basic ZmxhZzphenVsY3JlbWE= .</description></item><item><title>Internetwache CTF 2016 Procrastination (Crypto 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto-80-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:20:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto-80-arturo182/</guid><description>Problem Watching videos is fun!
Attachment: https://ctf.internetwache.org/files/crypto80.zip
Solved by 74 teams
Solution We unpack and get a webm file. When opened, it plays one of the big hits from the 80s for 36 seconds. Let&amp;rsquo;s run mediainfo on it, we see that it contains one video track and two audio tracks, let&amp;rsquo;s extract the second audio track.
avconv -i song.webm -map 0:2 audio.wav When playing it, we can hear phone dial noises, also known as DTMF.</description></item><item><title>Internetwache CTF 2016 Quick Run (Misc 60) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-60-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:15:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-60-arturo182/</guid><description>Problem Someone sent me a file with white and black rectangles. I don&amp;rsquo;t know how to read it. Can you help me?
Attachment: https://ctf.internetwache.org/files/misc60.zip
Solved by 269 teams
Solution We get a text file with a lot of base64, we dump it to a file:
cat README.txt | base64 -d &amp;gt; out and see what&amp;rsquo;s inside:
There were 24 ASCII QR Codes in the file, no python magic here, just a quick scan with a mobile app and we get the message letter-by-letter: Flagis:IW{QR_C0DES_RUL3}.</description></item><item><title>Internetwache CTF 2016 The Hidden Message (Misc 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 12:56:49 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-50-arturo182/</guid><description>Problem My friend really can&amp;rsquo;t remember passwords. So he uses some kind of obfuscation. Can you restore the plaintext?
Attachment: https://ctf.internetwache.org/files/misc50.zip
Solved by 347 teams
Solution We get a text file with the following contents:
0000000 126 062 126 163 142 103 102 153 142 062 065 154 111 121 157 113 0000020 122 155 170 150 132 172 157 147 123 126 144 067 124 152 102 146 0000040 115 107 065 154 130 062 116 150 142 154 071 172 144 104 102 167 0000060 130 063 153 167 144 130 060 113 012 0000071 Looks like a hex dump but with decimals instead of hex numbers, right?</description></item><item><title>Internetwache CTF 2016 Eso Tape (Rev 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev-80-arturo182/</link><pubDate>Sun, 21 Feb 2016 12:19:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev-80-arturo182/</guid><description>Problem I once took a nap on my keyboard. I dreamed of a brand new language, but I could not decipher it nor get its meaning. Can you help me? Hint: Replace the spaces with either &amp;lsquo;{&amp;rsquo; or &amp;lsquo;}&amp;rsquo; in the solution.
Attachment: https://ctf.internetwache.org/files/rev80.zip
Solved by 95 teams
Solution We unpack and get a priner.tb file looking like this:
## %% %++ %++ %++ %# *&amp;amp;* @** %# **&amp;amp;* ***-* ***-* %++ %++ @*** *-* @*** @** *+** @*** ***+* @*** **+** ***+* %++ @*** #% %% %++ %++ %++ %++ @* %# %++ %++ %++ %% *&amp;amp;** @* @*** *-** @* %# %++ @** *-** *-** **-*** **-*** **-*** @** @*** #% %% %++ %++ %++ %++ %# *+** %++ @** @* %# *+** @*** ## %% @*** Looks like an esoteric language, the name of the challenge supports the assumption.</description></item><item><title>SharifCTF 2016 Blocks (Forensics 400) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-blocks-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:47:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-blocks-arturo182/</guid><description>Problem I recovered as much data as I could. Can you recover the flag?
Attachment: A data blob
Solution To start with, file tells us nothing about the file, so we pop it into a hex editor and we can see familiar things:
...snip... 0000230: 8114 0407 1715 1501 820b 7461 626c 6564 ..........tabled 0000240: 6174 6164 6174 6105 4352 4541 5445 2054 atadata.CREATE T 0000250: 4142 4c45 2022 6461 7461 2220 280a 0960 ABLE &amp;quot;data&amp;quot; (.</description></item><item><title>SharifCTF 2016 We lost the Fashion Flag! (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-fashion-flag-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:44:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-fashion-flag-arturo182/</guid><description>Problem In Sharif CTF we have lots of task ready to use, so we stored their data about author or creation date and other related information in some files. But one of our staff used a method to store data efficiently and left the group some days ago. So if you want the flag for this task, you have to find it yourself!
Attachement: A tar.gz file
Solution After unpacking the tarball we get two files: sharif_tasks.</description></item><item><title>SharifCTF 2016 Uagent (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-uagent-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:42:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-uagent-arturo182/</guid><description>Problem We think we are really cool, are we?
Attachement: a pcap file
Solution The pcap file contains a session of someone downloading a file over HTTP. The title suggests checking the user-agent field, which I did, as it turns out, all the HTTP Request packages have a user agent in this format: sctf-app/iVBORw0=/, which is obviously base64.
So I wrote a python script to extract the base64, decode it and append to a file:</description></item><item><title>SharifCTF 2016 Dumped (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-dumped-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:38:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-dumped-arturo182/</guid><description>Problem In Windows Task Manager, I right clicked a process and selected &amp;ldquo;Create dump file&amp;rdquo;. I&amp;rsquo;ll give you the dump, but in return, give me the flag!
Attachment: A compressed Windows process dump
Solution I&amp;rsquo;m sure the creators had something very interesting in mind, however it seems they didn&amp;rsquo;t verify all the possibilities, because after extracting the xz file, I was able to run:
strings RunMe.DMP | grep -E &amp;quot;^SharifCTF{[0-9a-f]{32}}$&amp;quot; Which returned the flag: SharifCTF{4d7328869acb371ede596d73ce0a9af8}</description></item></channel></rss>