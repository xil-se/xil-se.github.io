<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writeups on Blog</title><link>https://blog.xil.se/categories/writeups/</link><description>Recent content in writeups on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Mar 2016 11:22:00 +0100</lastBuildDate><atom:link href="https://blog.xil.se/categories/writeups/index.xml" rel="self" type="application/rss+xml"/><item><title>Pwn2Win CTF 2016 Secret Accounts (Py 80) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-secret-accounts-rspkt/</link><pubDate>Mon, 28 Mar 2016 11:22:00 +0100</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-secret-accounts-rspkt/</guid><description>Problem Description: Through many months of sniffing, we discovered a server running a software which the Club uses to manage information about secret bank accounts abroad. We even obtained its source code. We need to obtain access to the system in order to discover the real name of the owner of the account possessing the greater amount of money, in which bank it is, and the real amount. As you might expect, it seems that the Club has hunkered down to assert only authorized people, which really know what they are doing, are able to operate this system and to interpret information provided by it.</description></item><item><title>Pwn2Win CTF 2016 Dump (Forensics 50) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-dump-rspkt/</link><pubDate>Mon, 28 Mar 2016 01:14:00 +0100</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-dump-rspkt/</guid><description>Problem Description: We know this dump was generated by a process which was executing as root in the computer, and that it was reading directly from a /dev device. Probably it is part of a keylogger module included in a rootkit which is being tested by the Club. Help us to unveil this message, allowing us to discover why they infected this specific machine.
Solution The dump file contained data that seemed to align well for 24 bytes, indicating that each record of the captured input was stored in some 24 byte datastructure.</description></item><item><title>Pwn2Win CTF 2016 Painel Message (Forensics 50) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-painel-message-rspkt/</link><pubDate>Mon, 28 Mar 2016 01:14:00 +0100</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-painel-message-rspkt/</guid><description>Problem Description: The last month we gained access to a video portraying a Club&amp;rsquo;s electronics project. It looks like they want to insert this display into the the digital panels found in urban buses that circulate in large cities. We need to discover what this is all about.
Those who automate the ENTIRE resolution of this challenge deserve 20 bonus points. Show your code to a judge (@). ;)</description></item><item><title>Pwn2Win CTF 2016 Simple Cryptography (Crypto 60) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-simple-crypto-rspkt/</link><pubDate>Mon, 28 Mar 2016 01:14:00 +0100</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-simple-crypto-rspkt/</guid><description>Problem Description: The club decided to evolve the security of communication for something more efficient and simple to be implemented &amp;hellip; simply too much!
The technique was reproduced in the message encoded below:
GA3TCYZRGU2DKXZXG5PTENZTHAZDSXZQHEYTKMJUGBSV6MBXGFSF6MTDGIYTGYJSMMZTIM3FL4YDOMLCL42GENJRGU2TIOBVGQ2WIXZRGBPTAZQ=
Add CTF-BR{} to submit the resulting hash.
Solution Figuring out the encoding scheme didn&amp;rsquo;t take many minutes. Noticing that the encoding alphabet seems to be a subset of Base64, we gave Base32 a shot. After decoding it, we were given the string:</description></item><item><title>Pwn2Win CTF 2016 Sequences (PPC 40) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-sequences-rspkt/</link><pubDate>Mon, 28 Mar 2016 00:44:00 +0100</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-sequences-rspkt/</guid><description>Problem Description: Warm up for the next PPC challenges. The Club guys love sequences, and it is always good to know your enemy.
We will show you some sequences, and after each sequence you need to predict the values which correctly fill the asked positions. We ALWAYS adopt the convention that position 1 corresponds to the first number of the sequence.
Output sent by the server: Position - Sequence</description></item><item><title>Pwn2Win 2016 Sleeper Cell (Reverse) Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-sleeper-cell-kbeckmann/</link><pubDate>Mon, 28 Mar 2016 01:07:36 +0200</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-sleeper-cell-kbeckmann/</guid><description>Problem N/A
Solution We get an ELF 64-bit executable that we should reverse.
Running it gives us a cat-like interface; it echoes back what comes in on stdin.
Looking at the disassembly, I don&amp;rsquo;t really feel like understanding it - let&amp;rsquo;s do dynamic RE instead.
Entering a bunch of &amp;lsquo;A&amp;rsquo;s and stepping, I find interesting things happening:
[-------------------------------------code-------------------------------------] 0x400e49: lea rsi,[rsp+0x10] 0x400e4e: mov edi,0x6020e0 0x400e53: call 0x400d00 &amp;lt;_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E@plt&amp;gt; =&amp;gt; 0x400e58: mov rdx,QWORD PTR [rax] 0x400e5b: mov rdx,QWORD PTR [rdx-0x18] 0x400e5f: test BYTE PTR [rax+rdx*1+0x20],0x5 0x400e64: jne 0x400f20 0x400e6a: lea rsi,[rsp+0x10] [------------------------------------stack-------------------------------------] 0000| 0x7fffffffe790 --&amp;gt; 0x601de0 --&amp;gt; 0x4011e0 (cmp QWORD PTR [rip+0x200c18],0x0 # 0x601e00) 0008| 0x7fffffffe798 --&amp;gt; 0x4010ff (add rsp,0x18) 0016| 0x7fffffffe7a0 --&amp;gt; 0x615598 ('A' &amp;lt;repeats 44 times&amp;gt;) 0024| 0x7fffffffe7a8 --&amp;gt; 0xff 0032| 0x7fffffffe7b0 --&amp;gt; 0x615548 (&amp;quot;DFHLNRTXDFLPRVBHJPTVBFLTXZDFJXBHJTVBHLRXZJLP&amp;quot;) 0040| 0x7fffffffe7b8 --&amp;gt; 0x40171d (add rbx,0x1) 0048| 0x7fffffffe7c0 --&amp;gt; 0x615608 (&amp;quot;DFHLNRTXDFLPRVBHJPTVBFLTXZDFJXBHJTVBHLRXZJLP&amp;quot;) 0056| 0x7fffffffe7c8 --&amp;gt; 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0x0000000000400e58 in ?</description></item><item><title>Pwn2Win 2016 QRGrams Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-qrgrams-kbeckmann/</link><pubDate>Mon, 28 Mar 2016 00:52:12 +0200</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-qrgrams-kbeckmann/</guid><description>Problem N/A. Something about QR and anagrams.
Solution Connect to a server and get a bunch of ascii and ansi QR codes, then are supposed to reply with a text and some numbers.
I solved it using qrtools, png and an anagram solver I found using Google. The anagram solver needs a dictionary to work, so I had to find a sorted word list by frequency (N-gram, the hint in the challenge name).</description></item><item><title>Pwn2Win 2016 Square Infinite Spiral Writeup</title><link>https://blog.xil.se/posts/pwn2win-2016-spiral-kbeckmann/</link><pubDate>Mon, 28 Mar 2016 00:30:27 +0200</pubDate><guid>https://blog.xil.se/posts/pwn2win-2016-spiral-kbeckmann/</guid><description>Problem Didn&amp;rsquo;t save the original text but here are my words:
Imagine an infinite 2d grid. Start at (0, 0). Move one unit right, then turn left whenever possible so that you don&amp;rsquo;t intersect with your trail. I.e. make a counter clock wise spiral. The challenge input is the number of iterations, the solution is the coordinate where the point ends up.
For input=4, the solution is (-1, 1)
---------- ------ | | | | | .</description></item><item><title>BCTF 2016 Upload (Forensics 200) Writeup</title><link>https://blog.xil.se/posts/bctf-2016-upload-forensics-kbeckmann/</link><pubDate>Mon, 21 Mar 2016 06:41:21 +0100</pubDate><guid>https://blog.xil.se/posts/bctf-2016-upload-forensics-kbeckmann/</guid><description>Problem Where are the files I just uploaded?
The files in the links below are the same, download any of them to begin hacking!
disk.img.xz - google drive link
disk.img.xz - dropbox link
disk.img.xz - baidu link
Solution We get a packed binary blob. Unpack it using xz and use file to see what it is.
$ xz -d disk.img.xz $ file disk.img disk.img: BTRFS Filesystem sectorsize 4096, nodesize 16384, leafsize 16384, UUID=89011762- aee-4847-9e0f-bca52fd99e0d, 155820032/2147483648 bytes used, 1 devices Oh a BTRFS image.</description></item><item><title>Boston Key Party 2016 Jit in my pants (RE 3) Writeup</title><link>https://blog.xil.se/posts/bkp-2016-jit-re-kbeckmann/</link><pubDate>Mon, 07 Mar 2016 17:00:00 +0100</pubDate><guid>https://blog.xil.se/posts/bkp-2016-jit-re-kbeckmann/</guid><description>Problem Because reversing an obfuscated jit&amp;rsquo;ed virtual machine for 3 points is fun!
(re 3, solved by 38)
Solution I downloaded it immediately when it was released and solved it really fast, but it turned out they uploaded the wrong binary. After a while they uploaded the proper binary and the fun could begin.
The binary takes the flag as argv[1]: ./c3803116bd70e802483d3bc4c4b564d2 BKPCTF{flag...}.
We&amp;rsquo;re provided with a binary with a strange loop and a call to a function pointer.</description></item><item><title>InternetWache 2016 404 Flag not found (misc 80)</title><link>https://blog.xil.se/posts/internetwache-2016-misc-80-simonvik/</link><pubDate>Sun, 21 Feb 2016 20:00:12 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-80-simonvik/</guid><description>Problem Description: I tried to download the flag, but somehow received only 404 errors :( Hint: The last step is to look for flag pattern.
(misc80, solved by 292)
Attachment: misc80.zip
Solution We are provided with a pcapng file, after opening the file in wireshark we can see that it contains some HTTP Requests (without answers) and some DNS lookups.
After looking at it for a while we noticed that the hostnames looked interesting, the first part of the hostname looked like hex-encoded ascii.</description></item><item><title>InternetWache 2016 Mess of Hash (Web 50)</title><link>https://blog.xil.se/posts/internetwache-2016-web-50-simonvik/</link><pubDate>Sun, 21 Feb 2016 20:00:12 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-web-50-simonvik/</guid><description>Problem Description: Students have developed a new admin login technique. I doubt that it&amp;rsquo;s secure, but the hash isn&amp;rsquo;t crackable. I don&amp;rsquo;t know where the problem is&amp;hellip;
(web50, solved by 170)
Attachment: web50.zip
Service: https://mess-of-hash.ctf.internetwache.org/
Solution We unpack the attachment and get a README.txt containing:
&amp;lt;?php $admin_user = &amp;#34;pr0_adm1n&amp;#34;; $admin_pw = clean_hash(&amp;#34;0e408306536730731920197920342119&amp;#34;); function clean_hash($hash) { return preg_replace(&amp;#34;/[^0-9a-f]/&amp;#34;,&amp;#34;&amp;#34;,$hash); } function myhash($str) { return clean_hash(md5(md5($str) . &amp;#34;SALT&amp;#34;)); } We can directly see that the hash assigned to $admin_pw looks interesting.</description></item><item><title>Internetwache CTF 2016 The Cube (Rev 90) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev90-rspkt/</link><pubDate>Sun, 21 Feb 2016 18:18:38 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev90-rspkt/</guid><description>Problem Description: I really like Rubik&amp;rsquo;s Cubes, so I created a challenge for you. I put the flag on the white tiles and scrambled the cube. Once you solved the cube, you&amp;rsquo;ll know my secret.
(rev90, solved by 232)
Attachment: rev90.zip
Solution In this task we were given a text-file containing the scrambling of a Rubik&amp;rsquo;s cube, as well as the different sides of the cube before it was scrambled.</description></item><item><title>Internetwache CTF 2016 Sh-ock (Exp 90) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp-90-arturo182/</link><pubDate>Sun, 21 Feb 2016 14:40:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp-90-arturo182/</guid><description>Problem This is some kind of weird thing. I am sh-ocked.
Service: 188.166.133.53:12589
Solved by 105 teams
Solution We nc to the service and are presented with a prompt:
Welcome and have fun! $ Let&amp;rsquo;s try something basic:
Welcome and have fun! $help [ReferenceError: lh is not defined] $ Right off the bat, that tells us a few things, the ReferenceError tells us that this is JavaScript (nodejs). The lh part is a little more confusing, let&amp;rsquo;s try something else:</description></item><item><title>Internetwache CTF 2016 Crypto-Pirat (Crypto 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 14:20:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto-50-arturo182/</guid><description>Problem Did the East German Secret Police see a Pirat on the sky? Help me find out!
Attachment: https://ctf.internetwache.org/files/crypto50.zip
Solution Sidenote: This one took us some time, we started ok but then our progress grinded to a halt because we just didn&amp;rsquo;t know what to do with the output we got. The organizers of the CTF agreed that the challenge was not clear enough and after 12 hours added two hints:</description></item><item><title>Internetwache CTF 2016 SPIM (Rev 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:42:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev-50-arturo182/</guid><description>Problem My friend keeps telling me, that real hackers speak assembly fluently. Are you a real hacker? Decode this string: &amp;ldquo;IVyN5U3X)ZUMYCs&amp;rdquo;
Attachment: https://ctf.internetwache.org/files/rev50.zip
Solved by 235 teams
Solution We unpack the file and get some MIPS assembly:
User Text Segment [00400000]..[00440000] [00400000] 8fa40000 lw $4, 0($29) ; 183: lw $a0 0($sp) # argc [00400004] 27a50004 addiu $5, $29, 4 ; 184: addiu $a1 $sp 4 # argv [00400008] 24a60004 addiu $6, $5, 4 ; 185: addiu $a2 $a1 4 # envp [0040000c] 00041080 sll $2, $4, 2 ; 186: sll $v0 $a0 2 [00400010] 00c23021 addu $6, $6, $2 ; 187: addu $a2 $a2 $v0 [00400014] 0c100009 jal 0x00400024 [main] ; 188: jal main [00400018] 00000000 nop ; 189: nop [0040001c] 3402000a ori $2, $0, 10 ; 191: li $v0 10 [00400020] 0000000c syscall ; 192: syscall # syscall 10 (exit) [00400024] 3c081001 lui $8, 4097 [flag] ; 7: la $t0, flag [00400028] 00004821 addu $9, $0, $0 ; 8: move $t1, $0 [0040002c] 3401000f ori $1, $0, 15 ; 11: sgt $t2, $t1, 15 [00400030] 0029502a slt $10, $1, $9 [00400034] 34010001 ori $1, $0, 1 ; 12: beq $t2, 1, exit [00400038] 102a0007 beq $1, $10, 28 [exit-0x00400038] [0040003c] 01095020 add $10, $8, $9 ; 14: add $t2, $t0, $t1 [00400040] 81440000 lb $4, 0($10) ; 15: lb $a0, ($t2) [00400044] 00892026 xor $4, $4, $9 ; 16: xor $a0, $a0, $t1 [00400048] a1440000 sb $4, 0($10) ; 17: sb $a0, 0($t2) [0040004c] 21290001 addi $9, $9, 1 ; 19: add $t1, $t1, 1 [00400050] 0810000b j 0x0040002c [for] ; 20: j for [00400054] 00082021 addu $4, $0, $8 ; 24: move $a0, $t0 [00400058] 0c100019 jal 0x00400064 [printstring]; 25: jal printstring [0040005c] 3402000a ori $2, $0, 10 ; 26: li $v0, 10 [00400060] 0000000c syscall ; 27: syscall [00400064] 34020004 ori $2, $0, 4 ; 30: li $v0, 4 [00400068] 0000000c syscall ; 31: syscall [0040006c] 03e00008 jr $31 ; 32: jr $ra I never did any MIPS work before, but armed with MIPS Instruction Reference, I started working on it.</description></item><item><title>Internetwache CTF 2016 Rock With The Wired Shark (Misc 70) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-70-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:33:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-70-arturo182/</guid><description>Problem Someone sent me a file with white and black rectangles. I don&amp;rsquo;t know how to read it. Can you help me?
Attachment: https://ctf.internetwache.org/files/misc70.zip
Solved by 454 teams
Solution What we get is a packet capture file. I usually approach those with python, but this one was easier to do with just Wireshark.
But first, let&amp;rsquo;s run strings on it for good measure, two things are interesting:
Authorization: Basic ZmxhZzphenVsY3JlbWE= .</description></item><item><title>Internetwache CTF 2016 Procrastination (Crypto 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto-80-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:20:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto-80-arturo182/</guid><description>Problem Watching videos is fun!
Attachment: https://ctf.internetwache.org/files/crypto80.zip
Solved by 74 teams
Solution We unpack and get a webm file. When opened, it plays one of the big hits from the 80s for 36 seconds. Let&amp;rsquo;s run mediainfo on it, we see that it contains one video track and two audio tracks, let&amp;rsquo;s extract the second audio track.
avconv -i song.webm -map 0:2 audio.wav When playing it, we can hear phone dial noises, also known as DTMF.</description></item><item><title>Internetwache CTF 2016 Quick Run (Misc 60) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-60-arturo182/</link><pubDate>Sun, 21 Feb 2016 13:15:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-60-arturo182/</guid><description>Problem Someone sent me a file with white and black rectangles. I don&amp;rsquo;t know how to read it. Can you help me?
Attachment: https://ctf.internetwache.org/files/misc60.zip
Solved by 269 teams
Solution We get a text file with a lot of base64, we dump it to a file:
cat README.txt | base64 -d &amp;gt; out and see what&amp;rsquo;s inside:
There were 24 ASCII QR Codes in the file, no python magic here, just a quick scan with a mobile app and we get the message letter-by-letter: Flagis:IW{QR_C0DES_RUL3}.</description></item><item><title>Internetwache CTF 2016 The Hidden Message (Misc 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-misc-50-arturo182/</link><pubDate>Sun, 21 Feb 2016 12:56:49 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-misc-50-arturo182/</guid><description>Problem My friend really can&amp;rsquo;t remember passwords. So he uses some kind of obfuscation. Can you restore the plaintext?
Attachment: https://ctf.internetwache.org/files/misc50.zip
Solved by 347 teams
Solution We get a text file with the following contents:
0000000 126 062 126 163 142 103 102 153 142 062 065 154 111 121 157 113 0000020 122 155 170 150 132 172 157 147 123 126 144 067 124 152 102 146 0000040 115 107 065 154 130 062 116 150 142 154 071 172 144 104 102 167 0000060 130 063 153 167 144 130 060 113 012 0000071 Looks like a hex dump but with decimals instead of hex numbers, right?</description></item><item><title>Internetwache CTF 2016 Eso Tape (Rev 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev-80-arturo182/</link><pubDate>Sun, 21 Feb 2016 12:19:00 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev-80-arturo182/</guid><description>Problem I once took a nap on my keyboard. I dreamed of a brand new language, but I could not decipher it nor get its meaning. Can you help me? Hint: Replace the spaces with either &amp;lsquo;{&amp;rsquo; or &amp;lsquo;}&amp;rsquo; in the solution.
Attachment: https://ctf.internetwache.org/files/rev80.zip
Solved by 95 teams
Solution We unpack and get a priner.tb file looking like this:
## %% %++ %++ %++ %# *&amp;amp;* @** %# **&amp;amp;* ***-* ***-* %++ %++ @*** *-* @*** @** *+** @*** ***+* @*** **+** ***+* %++ @*** #% %% %++ %++ %++ %++ @* %# %++ %++ %++ %% *&amp;amp;** @* @*** *-** @* %# %++ @** *-** *-** **-*** **-*** **-*** @** @*** #% %% %++ %++ %++ %++ %# *+** %++ @** @* %# *+** @*** ## %% @*** Looks like an esoteric language, the name of the challenge supports the assumption.</description></item><item><title>InternetWache 2016 Eso Taaape (Reverse 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev80-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 01:18:38 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev80-kbeckmann/</guid><description>Problem Description: I once took a nap on my keyboard. I dreamed of a brand new language, but I could not decipher it nor get its meaning. Can you help me? Hint: Replace the spaces with either &amp;lsquo;{&amp;rsquo; or &amp;lsquo;}&amp;rsquo; in the solution. Hint: Interpreters don&amp;rsquo;t help. Operations write to the current index.
(rev80, solved by 95)
Attachment: rev80.zip
Solution $ cat task/priner.tb ## %% %++ %++ %++ %# *&amp;amp;* @** %# **&amp;amp;* ***-* ***-* %++ %++ @*** *-* @*** @** *+** @*** ***+* @*** **+** ***+* %++ @*** #% %% %++ %++ %++ %++ @* %# %++ %++ %++ %% *&amp;amp;** @* @*** *-** @* %# %++ @** *-** *-** **-*** **-*** **-*** @** @*** #% %% %++ %++ %++ %++ %# *+** %++ @** @* %# *+** @*** ## %% @*** It took some time to find out what language this is, but since the title of the challenge is Eso Taaape, you could see this as a hint towards esoteric languages and something tape based.</description></item><item><title>InternetWache 2016 ServerfARM (Reverse 70) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev70-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 01:18:38 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev70-kbeckmann/</guid><description>Problem Description: Someone handed me this and told me that to pass the exam, I have to extract a secret string. I know cheating is bad, but once does not count. So are you willing to help me?
(rev70, solved by 184)
Attachment: rev70.zip
Solution The zip contains an ARM binary that seems to be compiled in a pretty nice way, no -O3 here.
I reversed the binary and could rebuild the flag from the execution paths.</description></item><item><title>InternetWache 2016 File Checker (Reverse 60) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-rev60-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 01:10:57 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-rev60-kbeckmann/</guid><description>Problem Description: My friend sent me this file. He told that if I manage to reverse it, I&amp;rsquo;ll have access to all his devices. My misfortune that I don&amp;rsquo;t know anything about reversing :/
(rev60, solved by 220)
Attachment: rev60.zip
Solution Looking at the provided binary we quickly see that it is reading a file .password and compares its contents to a set of values.
v4 = 4846; v5 = 4832; .</description></item><item><title>InternetWache 2016 Remote Printer (Exploit 80) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp80-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 00:36:12 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp80-kbeckmann/</guid><description>Problem Description: Printer are very very important for offices. Especially for remote printing. My boss told me to build a tool for that task.
(exp80, solved by 125)
Attachment: exp80.zip
Service: 188.166.133.53:12377
Solution This one was a bit harder. We are provided with a binary that listens on a port for incoming connections. When it gets a connection it reads an ip address and a port from the socket and connects to it.</description></item><item><title>InternetWache 2016 FlagStore (Exploit 70) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp70-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 00:08:47 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp70-kbeckmann/</guid><description>Problem Description: Here&amp;rsquo;s the ultimate flag store. Store and retrieve your flags whenever you want.
(exp70, solved by 244)
Attachment: exp70.zip
Service: 188.166.133.53:12157
Solution The zip contains c-code for the challenge. Looking at it I immediately see an overflow and an interesting location for the admin flag.
char username[500]; int is_admin = 0; // &amp;lt;-- can be overwritten char password[500]; ... printf(&amp;#34;Enter an username:&amp;#34;); scanf(&amp;#34;%s&amp;#34;, username); // scanf will overwrite username and is_admin The exploit is to simply send a long username and a \x01 byte.</description></item><item><title>InternetWache 2016 EquationSolver (Exploit 60) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp60-kbeckmann/</link><pubDate>Sun, 21 Feb 2016 00:02:30 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp60-kbeckmann/</guid><description>Problem Description: I created a program for an unsolveable equation system. My friend somehow forced it to solve the equations. Can you tell me how he did it?
(exp60, solved by 252)
Service: 188.166.133.53:12049
Solution Interacting with the server, we see the following:
$ nc 188.166.133.53 12049 Solve the following equations: X &amp;gt; 1337 X * 7 + 4 = 1337 Enter the solution X: 190 You entered: 190 190 is not bigger than 1337 WRONG!</description></item><item><title>InternetWache 2016 Ruby's count (Exploit 50) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-exp50-kbeckmann/</link><pubDate>Sat, 20 Feb 2016 23:56:46 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-exp50-kbeckmann/</guid><description>Problem Description: Hi, my name is Ruby. I like converting characters into ascii values and then calculating the sum.
(exp50, solved by 217)
Service: 188.166.133.53:12037
Solution We have to send characters where the sum adds upp to over 1020.
$ nc 188.166.133.53 12037 Let me count the ascii values of 10 characters: ffffffffff Sum is: 1020 That's not enough (1020 &amp;lt; 1020) :( $ nc 188.166.133.53 12037 Let me count the ascii values of 10 characters: qqqqqqqqqq WRONG!</description></item><item><title>InternetWache 2016 Bank (Crypto 90) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto90-kbeckmann/</link><pubDate>Sat, 20 Feb 2016 23:44:08 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto90-kbeckmann/</guid><description>Problem Description: Everyone knows that banks are insecure. This one super secure and only allows only 20 transactions per session. I always wanted a million on my account.
(crypto90, solved by 104)
Attachment: crypto90.zip
Service: 188.166.133.53:10061
Solution The challenge file contains a python script that is also running on the challenge server.
Running it shows us an interface to do transactions.
We can put money into our account by creating a transaction and then signing it using a signature that we get from the server.</description></item><item><title>InternetWache 2016 A numbers game II (Crypto 70) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto70-kbeckmann/</link><pubDate>Sat, 20 Feb 2016 23:29:14 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto70-kbeckmann/</guid><description>Problem Description: There was this student hash design contest. All submissions were crap, but had promised to use the winning algorithm for our important school safe. We hashed our password and got &amp;lsquo;00006800007d&amp;rsquo;. Brute force isn&amp;rsquo;t effective anymore and the hash algorithm had to be collision-resistant, so we&amp;rsquo;re good to go, aren&amp;rsquo;t we?
(crypto70, solved by 86)
Attachment: crypto70.zip
Service: 188.166.133.53:10009
Solution Connecting to the service we are faced with a bruteforce blocker / challenge.</description></item><item><title>InternetWache 2016 Oh Bob! (Crypto 60) Writeup</title><link>https://blog.xil.se/posts/internetwache-2016-crypto60-kbeckmann/</link><pubDate>Sat, 20 Feb 2016 23:11:07 +0100</pubDate><guid>https://blog.xil.se/posts/internetwache-2016-crypto60-kbeckmann/</guid><description>Problem Description: Alice wants to send Bob a confidential message. They both remember the crypto lecture about RSA. So Bob uses openssl to create key pairs. Finally, Alice encrypts the message with Bob&amp;rsquo;s public keys and sends it to Bob. Clever Eve was able to intercept it. Can you help Eve to decrypt the message?
(crypto60, solved by 167)
Attachment: crypto60.zip
Solution The challenge zip file contains 3 public keys and a file with three encrypted strings.</description></item><item><title>SharifCTF 2016 Hack By The Sound (Misc 200) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-misc-sound-rspkt/</link><pubDate>Sun, 07 Feb 2016 14:00:00 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-misc-sound-rspkt/</guid><description>Problem A well known blogger has came to a hotel that we had good relationships with its staffs.
We tried to capture the sound of his room by placing a microphone inside the desk.
We have recorded the sound about the time that he has typed a text in his blogg. You could find the text he typed in &amp;ldquo;Blog Text.txt&amp;rdquo;.
We reduce noises somehow and found that many characters may have the same keysound.</description></item><item><title>SharifCTF 2016 Sec-Coding 2 (Misc 300) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-misc-secure2/</link><pubDate>Sat, 06 Feb 2016 23:13:14 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-misc-secure2/</guid><description>Problem You should fix vulnerabilities of the given source code, WITHOUT changing its normal behaviour. Link
Points: 300
Solved by 83 team(s)
Solution Just like the previous Sec-Coding 1, we get a link to a web UI where we should upload patched C++ code.
We are provided with windows C++ code that prints a repeated message based on the input.
The original code was pretty bad so I simply rewrote it completely and this solved all the security issues.</description></item><item><title>SharifCTF 2016 Login to System (PWN 200) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-pwn-login/</link><pubDate>Sat, 06 Feb 2016 22:31:14 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-pwn-login/</guid><description>Problem Can you login to this system without username and password?
telnet ctf.sharif.edu 27515
Run and capture the flag!
Download
Points: 200
Solved by 106 team(s)
Solution We are provided with a x86-64 linux executable:
Question: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=76aad63504451c70d8aa4e72299d2821fcf1b9f1, stripped It is a server that starts a new handler thread for each incoming TCP connection on port 27515.</description></item><item><title>SharifCTF 2016 Serial (RE 150) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-re6-serial/</link><pubDate>Sat, 06 Feb 2016 22:02:14 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-re6-serial/</guid><description>Problem Run and capture the flag!
Points: 150
Solved by 110 team(s)
Solution We are provided with a x86-64 linux executable:
rgg: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.26, BuildID[sha1]=77e92e8b1bd4f26641bab4dbf563037a7b9538d2, not stripped The binary isn&amp;rsquo;t very big but looks funny in various decompilers and disassemblers.
The code does a lot of unaligned jumps and fills the section in between with junk, so disassemblers get really confused.</description></item><item><title>SharifCTF 2016 SRM (RE 50) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-re-srm-kbeckmann/</link><pubDate>Sat, 06 Feb 2016 21:41:14 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-re-srm-kbeckmann/</guid><description>Problem The flag is : The valid serial number
Points: 50
Solved by 176 team(s)
Solution We are provided with a PE32 windows executable:
RM.exe: PE32 executable (GUI) Intel 80386, for MS Windows The binary has a lot of code, so I started to look for how it interacts with the user.
sub_401280() calls message box APIs so it looks interesting. It turns out that this is where all the magic happens.</description></item><item><title>SharifCTF 2016 dMd (RE 50) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-re-dmd-kbeckmann/</link><pubDate>Sat, 06 Feb 2016 21:25:14 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-re-dmd-kbeckmann/</guid><description>Problem Attachment: A data blob
Flag is : The valid input
Points: 50
Solved by 243 team(s)
Solution We are provided with a x86-64 linux binary:
dMd: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=2643fecd383362fe9593ef8605a9ce882a85a38a, not stripped After looking at the disassembly, we find a series of hard coded checks.
It&amp;rsquo;s simply checking the md5 sum of the input for a hard coded value.</description></item><item><title>SharifCTF 2016 Blocks (Forensics 400) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-blocks-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:47:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-blocks-arturo182/</guid><description>Problem I recovered as much data as I could. Can you recover the flag?
Attachment: A data blob
Solution To start with, file tells us nothing about the file, so we pop it into a hex editor and we can see familiar things:
...snip... 0000230: 8114 0407 1715 1501 820b 7461 626c 6564 ..........tabled 0000240: 6174 6164 6174 6105 4352 4541 5445 2054 atadata.CREATE T 0000250: 4142 4c45 2022 6461 7461 2220 280a 0960 ABLE &amp;quot;data&amp;quot; (.</description></item><item><title>SharifCTF 2016 We lost the Fashion Flag! (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-fashion-flag-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:44:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-fashion-flag-arturo182/</guid><description>Problem In Sharif CTF we have lots of task ready to use, so we stored their data about author or creation date and other related information in some files. But one of our staff used a method to store data efficiently and left the group some days ago. So if you want the flag for this task, you have to find it yourself!
Attachement: A tar.gz file
Solution After unpacking the tarball we get two files: sharif_tasks.</description></item><item><title>SharifCTF 2016 Uagent (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-uagent-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:42:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-uagent-arturo182/</guid><description>Problem We think we are really cool, are we?
Attachement: a pcap file
Solution The pcap file contains a session of someone downloading a file over HTTP. The title suggests checking the user-agent field, which I did, as it turns out, all the HTTP Request packages have a user agent in this format: sctf-app/iVBORw0=/, which is obviously base64.
So I wrote a python script to extract the base64, decode it and append to a file:</description></item><item><title>SharifCTF 2016 Dumped (Forensics 100) Writeup</title><link>https://blog.xil.se/posts/sharifctf-2016-forensics-dumped-arturo182/</link><pubDate>Sat, 06 Feb 2016 20:38:49 +0100</pubDate><guid>https://blog.xil.se/posts/sharifctf-2016-forensics-dumped-arturo182/</guid><description>Problem In Windows Task Manager, I right clicked a process and selected &amp;ldquo;Create dump file&amp;rdquo;. I&amp;rsquo;ll give you the dump, but in return, give me the flag!
Attachment: A compressed Windows process dump
Solution I&amp;rsquo;m sure the creators had something very interesting in mind, however it seems they didn&amp;rsquo;t verify all the possibilities, because after extracting the xz file, I was able to run:
strings RunMe.DMP | grep -E &amp;quot;^SharifCTF{[0-9a-f]{32}}$&amp;quot; Which returned the flag: SharifCTF{4d7328869acb371ede596d73ce0a9af8}</description></item><item><title>HackIM 2016 Crypto 1 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-crypto-1-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-crypto-1-arturo182/</guid><description>Problem You are in this GAME. A critical mission, and you are surrounded by the beauties, ready to shed their slik gowns on your beck. On onside your feelings are pulling you apart and another side you are called by the duty. The biggiest question is seX OR success? The signals of subconcious mind are not clear, cryptic. You also have the message of heart which is clear and cryptic.</description></item><item><title>HackIM 2016 Crypto 2 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-crypto-2-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-crypto-2-arturo182/</guid><description>Problem Some one was here, some one had breached the security and had infiltrated here. All the evidences are touched, Logs are altered, records are modified with key as a text from book.The Operation was as smooth as CAESAR had Conquested Gaul. After analysing the evidence we have some extracts of texts in a file. We need the title of the book back, but unfortunately we only have a portion of it&amp;hellip;</description></item><item><title>HackIM 2016 Crypto 3 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-crypto-3-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-crypto-3-arturo182/</guid><description>Problem After entring the luxurious condomium,you get the feel that you are in home of a yester Star. the extravagant flooring and furnishings shows the richness of this star. But where is she? There she is, lying peacefuly on her couch. See what Envy has done to her&amp;hellip;with a perfectly well maintained attractive body she still looks sex diva, except for her face beyond recogniton. Her identity is crucial to know who killed her and why?</description></item><item><title>HackIM 2016 Misc 2 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-misc-2-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-misc-2-arturo182/</guid><description>Problem Find out the secret key hidden in these packets!
Attachement: http://ctf.nullcon.net/misc/m200-HiPs.rar
Files:
f101.pcap f102.pcap f103.pcap Solution We get three packet capture files, when inspecting with Wireshark, we can see they log ping requests and responses between two hosts. Upon closer inspection we see that they seem to have quite large data payloads attached, so we decided to extract and concatenate all the data from the first file.</description></item><item><title>HackIM 2016 Programming 1 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-programming-1-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-programming-1-arturo182/</guid><description>Problem So you reached Delhi and now the noise in your head is not allowing you to think rationally. The Nosise in your head has origin its Origin in your Stomach. And this is a big hunger. You can finish one or probably 2 Tandoori Chicken. So where can you get the best Tandoori Chicken in Delhi? This place tweeted last week that the Tandoori Chicken it servers is like never B4.</description></item><item><title>HackIM 2016 Programming 3 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-programming-3-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-programming-3-arturo182/</guid><description>Problem Still Hungry and unsutisfied, you are looking for more. Some more, unique un heard dishes. Then you can find one to make it your self. Its his Dish. He has his own website which is he describes as &amp;quot; a social home for each of our passions&amp;rdquo;. The link to his website is on his google+ page. whats the name of his site. By the way he loves and hogs on &amp;ldquo;Onion Kheer&amp;rdquo;.</description></item><item><title>HackIM 2016 Programming 4 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-programming-4-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-programming-4-arturo182/</guid><description>Problem One of the NullCon vidoes talked about a marvalous Russian Gift. The Vidoe was uploaded on [May of 2015] What is the ID of that youtube video.
Solution Like with Programming 3, we can use Google to search for &amp;ldquo;may 2015 nullcon&amp;rdquo; and check out the Videos section, there are only 5 videos, so we can quickly find the right one.
Flag: a4_PvN_A1ts</description></item><item><title>HackIM 2016 Programming 5 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-programming-5-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-programming-5-arturo182/</guid><description>Problem Dont blink your Eyes, you might miss it. But the fatigue and exhaustion rules out any logic, any will to stay awake. What you need now is a slumber. Cat nap will not do. 1 is LIFE and 0 is DEAD. in this GAME OF LIFE sleep is as important food. So&amp;hellip; catch some sleep. But Remember&amp;hellip;In the world of 10x10 matirx, the Life exists. If you SLOTH, sleep for 7 Ticks, or 7 Generation, In the game of Life can you tell what will be the state of the world?</description></item><item><title>HackIM 2016 Trivia 3 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-trivia-3-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-trivia-3-arturo182/</guid><description>Problem Bill Gates loves Cipher.
Attachement: http://ctf.nullcon.net/trivia/trivia3.png
Solution This one took some time to figure out, mostly because the description is so vague. But using reverse image search for the cipher characters and &amp;ldquo;Bill&amp;rdquo; as keyword (Gates was a red herring), we managed to find Bill&amp;rsquo;s Cipher.
With the substitution table, it was very easy to get the proper string.
Flag: aglisurakshakivastu</description></item><item><title>HackIM 2016 Trivia 4 Writeup</title><link>https://blog.xil.se/posts/hackim-2016-trivia-4-arturo182/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.xil.se/posts/hackim-2016-trivia-4-arturo182/</guid><description>Problem Use the file. Get the flag. But, you know what, I hate pipes.
Attachement: http://ctf.nullcon.net/trivia/trivia4.txt
Solution The file contains the esoteric Ook language, we can convert it to text using this tool.
We get:
starting from 0.0.0.0, print the following IPs.
7277067th IP Address
7234562th IP Address
7302657th IP Address
91238th IP Address
746508th IP Address
7211531th IP Address
7300098th IP Address
7211788th IP Address
723558th IP Address</description></item></channel></rss>